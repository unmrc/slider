#!/usr/bin/env node

// Node Imports
const fs = require('fs');
const path = require('path');
const util = require('util');

// Imports
const minimist = require('minimist');
const Mustache = require('mustache');

// Constants
const BLOCK_DIR = './src/blocks';
const BLOCK_NAME_REGEXP = /^([a-z][0-9a-z]*)(-[0-9a-z]+)*$/;
const TEMPLATE_DIR = './src/blocks/templates';

// Promisified Functions
const exists = util.promisify(fs.exists);
const mkdir = util.promisify(fs.mkdir);
const readFile = util.promisify(fs.readFile);
const writeFile = util.promisify(fs.writeFile);

function capitalize(word) {
    return word.substr(0, 1).toUpperCase() + word.substr(1);
}

function getConstructorName(blockName) {
    return blockName.split('-').reduce((result, word) => {
        return result + capitalize(word);
    }, '');
}

function getBlockTitle(blockName) {
    return blockName.replace(/-/g, ' ');
}

async function createDirectory(dirName) {
    const blockExists = await exists(dirName);
    if (blockExists) {
        throw new Error(`Block already exists: ${dirName}`);
    }

    return await mkdir(dirName, { recursive: true });
};

async function renderTemplate(templateName, tags, outputPath) {
    const templatePath = path.join(TEMPLATE_DIR, templateName);
    const template = await readFile(templatePath, 'utf8');
    const result = Mustache.render(template.toString(), tags);
    await writeFile(outputPath, result, 'utf8');
}

function renderAllTemplates(dirName, options) {
    const blockName = path.basename(dirName);

    const tags = {
        blockName,
        blockTitle: getBlockTitle(blockName),
        constructorName: getConstructorName(blockName),
    };

    const results = [];
    for (const type of Object.keys(options.types)) {
        let templateName = `block.${type}.mustache`;
        if (type === 'js' && options.generateClass) {
            templateName = 'block.class.js.mustache';
        }

        const outputPath = path.join(dirName, `${blockName}.${type}`);
        results.push(renderTemplate(templateName, tags, outputPath));

        if (type === 'js') {
            results.push(renderTemplate('index.js.mustache', tags, path.join(
                dirName,
                'index.js'
            )));
        }
    }

    return Promise.all(results);
}

async function createBlock(blockPath, options) {
    const dirName = path.join(BLOCK_DIR, blockPath);

    const blockName = path.basename(dirName);
    if (!BLOCK_NAME_REGEXP.test(blockName)) {
        throw new Error(`Invalid block name: ${blockName}`);
    }

    await createDirectory(dirName);
    await renderAllTemplates(dirName, options);
}

async function createAllBlocks(blocks, options) {
    try {
        for (const block of blocks) {
            await createBlock(block, options);
        }
    } catch (err) {
        console.error(err.message);
        process.exit(1);
    }
}

(async () => {
    const usageStr = 
    `Usage: make-block BLOCK... [OPTION]...
    Create one or multiple BLOCK(s)

    Select implementation technologies:
    -a, --all     Generate .scss, .pug, and .js files (default)
    -s, --scss    Generate a .scss file for block styles
    -p, --pug     Generate a .pug file for block markup
    -j, --js      Generate a .js file for block behavior

    Additional options:
    -c, --class   Generate a JS class definition for the block
    `;

    const parsedArgs = minimist(process.argv.slice(2));

    const blocks = parsedArgs._;
    if (blocks.length === 0) {
        console.error(usageStr);
        process.exit(1);
    }

    const options = {
        types: {},
        generateClass: false,
    };

    for (const option of Object.keys(parsedArgs)) {
        switch (option) {
        case '_':
            break;

        case 'a':
        case 'all':
            options.types = {
                pug: true,
                scss: true,
                js: true,
            }
            break;
        
        case 'p':
        case 'pug':
            options.types.pug = true;
            break;

        case 's':
        case 'scss':
            options.types.scss = true;
            break;

        case 'j':
        case 'js':
            options.types.js = true;
            break;

        case 'c':
        case 'class':
            options.generateClass = true;
            break;

        default:
            console.error('Uknown option:', option);
            console.error('');
            console.error(usageStr);
            process.exit(1);
        }
    }

    if (Object.keys(options.types).length === 0) {
        options.types = {
            pug: true,
            scss: true,
            js: true,
        }
    }

    await createAllBlocks(blocks, options);
})();
